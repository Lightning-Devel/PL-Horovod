# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  tags:
    include:
      - '*'
  branches:
    include:
      - "main"
      - "refs/tags/*"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - ".azure/gpu-tests.yml"
      - "tests/**"
      - "pyproject.toml"  # includes pytest config
      - "requirements.txt"
      - "tests/requirements.txt"
      - "src/**"
    exclude:
      - "*.md"
      - "**/*.md"

jobs:
  - job: testing
    # how long to run the job before automatically cancelling
    timeoutInMinutes: "30"
    # how much time to give 'run always even if cancelled tasks' before stopping them
    cancelTimeoutInMinutes: "2"
    strategy:
      matrix:
        'PL dep.':
          image: "pytorch/pytorch:1.13.1-cuda11.6-cudnn8-devel"
          dependency: "pytorch-lightning"
        'Lightning dep.':
          image: "pytorch/pytorch:1.13.1-cuda11.6-cudnn8-devel"
          dependency: "lightning"
    pool: 'lit-rtx-3090'
    variables:
      DEVICES: $( python -c 'print("$(Agent.Name)".split("_")[-1])' )
      FREEZE_REQUIREMENTS: "1"
      # HOROVOD_CUDA_HOME: $(CUDA_TOOLKIT_ROOT_DIR)
      HOROVOD_GPU_OPERATIONS: NCCL
      HOROVOD_WITH_PYTORCH: 1
      HOROVOD_WITHOUT_TENSORFLOW: 1
      HOROVOD_WITHOUT_MXNET: 1
      HOROVOD_WITH_GLOO: 1
      HOROVOD_WITH_MPI: 1
    container:
      image: $(image)
      # default shm size is 64m. Increase it to avoid:
      # 'Error while creating shared memory: unhandled system error, NCCL version 2.7.8'
      options: "--gpus=all --shm-size=2gb -v /usr/bin/docker:/tmp/docker:ro"
    workspace:
      clean: all
    steps:

    - bash: |
        lspci | egrep 'VGA|3D'
        whereis nvidia
        nvidia-smi
        which python && which pip
        python --version
        pip --version
        pip list
        echo "##vso[task.setvariable variable=CUDA_VISIBLE_DEVICES]$(DEVICES)"
      displayName: 'Image info & NVIDIA'

    - script: |
        container_id=$(head -1 /proc/self/cgroup|cut -d/ -f3)
        echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
        /tmp/docker exec -t -u 0 $container_id \
          sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
        echo "##vso[task.setvariable variable=CONTAINER_ID]$container_id"
      displayName: 'Install Sudo in container (thanks Microsoft!)'

    - script: |
        python .azure/adjust-requirements.py $(dependency)
        cat requirements.txt
      displayName: 'Adjust dependencies'

    - bash: |
        apt install -y libopenmpi-dev openmpi-bin
        pip install "pip<23.0"  # HotFix for bad Horovod requirements
        pip install -e . -r tests/requirements.txt
      displayName: 'Install package & extras'

    - bash: |
        HOROVOD_BUILT=$(python -c "import horovod.torch; horovod.torch.nccl_built(); print('SUCCESS')" || true)
        if [[ $HOROVOD_BUILT != "SUCCESS" ]]; then
          pip uninstall -y horovod
          grep "horovod" requirements.txt > requires-horovod.txt
          pip install --no-cache-dir -r requires-horovod.txt
        fi
        horovodrun --check-build
        python -c "import horovod.torch"
        pip list | grep -e torch -e horovod
      displayName: 'Reinstall Horovod (if necessary)'

    - bash: |
        pip list
        python -c "import torch ; mgpu = torch.cuda.device_count() ; assert mgpu == 2, f'GPU: {mgpu}'"
      displayName: 'Env details'

    - bash: pytest tests/ -vv
      env:
        PL_USE_MOCKED_MNIST: 1
      displayName: 'Testing: standard'
      timeoutInMinutes: "10"

    #- bash: |
    #    python -m coverage report
    #    python -m coverage xml
    #    python -m codecov --token=$(CODECOV_TOKEN) --commit=$(Build.SourceVersion) \
    #      --flags=gpu,pytest --name="GPU-coverage" --env=linux,azure
    #    ls -l
    #  workingDirectory: tests/
    #  displayName: 'Statistics'
